<?php

namespace {{namespace}};

use App\Http\Controllers\Controller;
use App\Modules\{{moduleName}}\Services\{{moduleName}}Service\{{modelName}}Service;
use App\Modules\{{moduleName}}\Http\Requests\Store{{modelName}}Request;
use App\Modules\{{moduleName}}\Http\Requests\Update{{modelName}}Request;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use Exception;

class {{modelName}}Controller extends Controller
{
    protected ${{modelNameLower}}Service;

    public function __construct({{modelName}}Service ${{modelNameLower}}Service)
    {
        $this->{{modelNameLower}}Service = ${{modelNameLower}}Service;
    }

    /**
     * Display a listing of {{modelNameLower}} records
     */
    public function index(Request $request)
    {
        try {
            $perPage = $request->get('per_page', 15);
            $search = $request->get('search');

            if ($search) {
                ${{modelNameLower}}s = $this->{{modelNameLower}}Service->search($search);
                ${{modelNameLower}}s = collect(${{modelNameLower}}s)->paginate($perPage);
            } else {
                ${{modelNameLower}}s = $this->{{modelNameLower}}Service->paginate($perPage);
            }

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => true,
                    'data' => ${{modelNameLower}}s,
                    'message' => '{{modelName}} records retrieved successfully'
                ]);
            }

            return view('{{moduleNameLower}}::{{modelNameLower}}.index', compact('{{modelNameLower}}s'));
        } catch (Exception $e) {
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Failed to retrieve {{modelNameLower}} records: ' . $e->getMessage()
                ], 500);
            }

            return redirect()->back()->with('error', 'Failed to retrieve {{modelNameLower}} records');
        }
    }

    /**
     * Show the form for creating a new {{modelNameLower}}
     */
    public function create(): View
    {
        return view('{{moduleNameLower}}::{{modelNameLower}}.create');
    }

    /**
     * Store a newly created {{modelNameLower}} record
     */
    public function store(Store{{modelName}}Request $request)
    {
        try {
            ${{modelNameLower}} = $this->{{modelNameLower}}Service->create($request->validated());

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => true,
                    'data' => ${{modelNameLower}},
                    'message' => '{{modelName}} created successfully'
                ], 201);
            }

            return redirect()->route('{{moduleNameLower}}.{{modelNameLower}}.index')
                           ->with('success', '{{modelName}} updated successfully');
        } catch (Exception $e) {
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => $e->getMessage()
                ], 400);
            }

            return redirect()->back()
                           ->withInput()
                           ->with('error', $e->getMessage());
        }
    }

    /**
     * Remove the specified {{modelNameLower}} record
     */
    public function destroy(Request $request, int $id)
    {
        try {
            $this->{{modelNameLower}}Service->delete($id);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => true,
                    'message' => '{{modelName}} deleted successfully'
                ]);
            }

            return redirect()->route('{{moduleNameLower}}.{{modelNameLower}}.index')
                           ->with('success', '{{modelName}} deleted successfully');
        } catch (Exception $e) {
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => $e->getMessage()
                ], 400);
            }

            return redirect()->back()
                           ->with('error', $e->getMessage());
        }
    }

    /**
     * Get {{modelNameLower}} records for API
     */
    public function apiIndex(Request $request): JsonResponse
    {
        try {
            $perPage = $request->get('per_page', 15);
            $search = $request->get('search');

            if ($search) {
                ${{modelNameLower}}s = $this->{{modelNameLower}}Service->search($search);
            } else {
                ${{modelNameLower}}s = $this->{{modelNameLower}}Service->paginate($perPage);
            }

            return response()->json([
                'success' => true,
                'data' => ${{modelNameLower}}s,
                'message' => '{{modelName}} records retrieved successfully'
            ]);
        } catch (Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve {{modelNameLower}} records: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Bulk delete {{modelNameLower}} records
     */
    public function bulkDestroy(Request $request): JsonResponse
    {
        try {
            $ids = $request->input('ids', []);
            
            if (empty($ids)) {
                return response()->json([
                    'success' => false,
                    'message' => 'No IDs provided for bulk delete'
                ], 400);
            }

            $deletedCount = 0;
            foreach ($ids as $id) {
                try {
                    $this->{{modelNameLower}}Service->delete($id);
                    $deletedCount++;
                } catch (Exception $e) {
                    // Log individual failures but continue
                    \Log::warning("Failed to delete {{modelNameLower}} {$id}: " . $e->getMessage());
                }
            }

            return response()->json([
                'success' => true,
                'message' => "Successfully deleted {$deletedCount} {{modelNameLower}} record(s)",
                'deleted_count' => $deletedCount
            ]);
        } catch (Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Bulk delete failed: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Display the specified {{modelNameLower}} record
     */
    public function show(Request $request, int $id)
    {
        try {
            ${{modelNameLower}} = $this->{{modelNameLower}}Service->findByIdOrFail($id);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => true,
                    'data' => ${{modelNameLower}},
                    'message' => '{{modelName}} retrieved successfully'
                ]);
            }

            return view('{{moduleNameLower}}::{{modelNameLower}}.show', compact('{{modelNameLower}}'));
        } catch (Exception $e) {
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Failed to retrieve {{modelNameLower}}: ' . $e->getMessage()
                ], 404);
            }

            return redirect()->route('{{moduleNameLower}}.{{modelNameLower}}.index')
                           ->with('error', 'Failed to retrieve {{modelNameLower}}');
        }
    }

    /**
     * Show the form for editing the specified {{modelNameLower}}
     */
    public function edit(int $id): View
    {
        try {
            ${{modelNameLower}} = $this->{{modelNameLower}}Service->findByIdOrFail($id);
            return view('{{moduleNameLower}}::{{modelNameLower}}.edit', compact('{{modelNameLower}}'));
        } catch (Exception $e) {
            return redirect()->route('{{moduleNameLower}}.{{modelNameLower}}.index')
                           ->with('error', 'Failed to find {{modelNameLower}} for editing');
        }
    }

    /**
     * Update the specified {{modelNameLower}} record
     */
    public function update(Update{{modelName}}Request $request, int $id)
    {
        try {
            ${{modelNameLower}} = $this->{{modelNameLower}}Service->update($id, $request->validated());

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => true,
                    'data' => ${{modelNameLower}},
                    'message' => '{{modelName}} updated successfully'
                ]);
            }

            return redirect()->route('{{moduleNameLower}}.{{modelNameL}ower}}.index')->with('success', '{{modelName}} created successfully');
        } catch (Exception $e) {
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => $e->getMessage()
                ], 400);
            }

            return redirect()->back()
                           ->withInput()
                           ->with('error', $e->getMessage());
        }
}