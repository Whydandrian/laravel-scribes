<?php

namespace {{namespace}};

use App\Modules\{{moduleName}}\Repositories\{{modelName}}Repository\{{modelName}}Repository;
use App\Modules\{{moduleName}}\Models\{{modelName}};
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Pagination\LengthAwarePaginator;
use Exception;

class {{modelName}}Service
{
    protected ${{modelNameLower}}Repository;

    public function __construct({{modelName}}Repository ${{modelNameLower}}Repository)
    {
        $this->{{modelNameLower}}Repository = ${{modelNameLower}}Repository;
    }

    /**
     * Get all {{modelNameLower}} records
     */
    public function getAll(): Collection
    {
        return $this->{{modelNameLower}}Repository->getAll();
    }

    /**
     * Get {{modelNameLower}} records with pagination
     */
    public function paginate(int $perPage = 15): LengthAwarePaginator
    {
        return $this->{{modelNameLower}}Repository->paginate($perPage);
    }

    /**
     * Find {{modelNameLower}} by ID
     */
    public function findById(int $id): ?{{modelName}}
    {
        return $this->{{modelNameLower}}Repository->findById($id);
    }

    /**
     * Find {{modelNameLower}} by ID or throw exception
     */
    public function findByIdOrFail(int $id): {{modelName}}
    {
        return $this->{{modelNameLower}}Repository->findByIdOrFail($id);
    }

    /**
     * Create new {{modelNameLower}}
     */
    public function create(array $data): {{modelName}}
    {
        try {
            // Add any business logic validation here
            $this->validateCreateData($data);
            
            return $this->{{modelNameLower}}Repository->create($data);
        } catch (Exception $e) {
            throw new Exception("Failed to create {{modelNameLower}}: " . $e->getMessage());
        }
    }

    /**
     * Update {{modelNameLower}}
     */
    public function update(int $id, array $data): {{modelName}}
    {
        try {
            ${{modelNameLower}} = $this->findByIdOrFail($id);
            
            // Add any business logic validation here
            $this->validateUpdateData($data, ${{modelNameLower}});
            
            $this->{{modelNameLower}}Repository->update(${{modelNameLower}}, $data);
            
            return ${{modelNameLower}}->fresh();
        } catch (Exception $e) {
            throw new Exception("Failed to update {{modelNameLower}}: " . $e->getMessage());
        }
    }

    /**
     * Delete {{modelNameLower}}
     */
    public function delete(int $id): bool
    {
        try {
            ${{modelNameLower}} = $this->findByIdOrFail($id);
            
            // Add any business logic validation here
            $this->validateDeleteData(${{modelNameLower}});
            
            return $this->{{modelNameLower}}Repository->delete(${{modelNameLower}});
        } catch (Exception $e) {
            throw new Exception("Failed to delete {{modelNameLower}}: " . $e->getMessage());
        }
    }

    /**
     * Search {{modelNameLower}} records
     */
    public function search(string $query, array $columns = []): Collection
    {
        return $this->{{modelNameLower}}Repository->search($query, $columns);
    }

    /**
     * Get {{modelNameLower}} records by conditions
     */
    public function getWhere(array $conditions): Collection
    {
        return $this->{{modelNameLower}}Repository->getWhere($conditions);
    }

    /**
     * Get latest {{modelNameLower}} records
     */
    public function latest(int $limit = 10): Collection
    {
        return $this->{{modelNameLower}}Repository->latest($limit);
    }

    /**
     * Check if {{modelNameLower}} exists
     */
    public function exists(int $id): bool
    {
        return $this->{{modelNameLower}}Repository->exists($id);
    }

    /**
     * Get total count of {{modelNameLower}} records
     */
    public function count(): int
    {
        return $this->{{modelNameLower}}Repository->count();
    }

    /**
     * Bulk create {{modelNameLower}} records
     */
    public function bulkCreate(array $data): bool
    {
        try {
            // Validate bulk data
            foreach ($data as $item) {
                $this->validateCreateData($item);
            }
            
            return $this->{{modelNameLower}}Repository->bulkInsert($data);
        } catch (Exception $e) {
            throw new Exception("Failed to bulk create {{modelNameLower}} records: " . $e->getMessage());
        }
    }

    /**
     * Validate data for create operation
     */
    protected function validateCreateData(array $data): void
    {
        // Add your custom business logic validation here
        // Example:
        // if (empty($data['name'])) {
        //     throw new Exception('Name is required');
        // }
    }

    /**
     * Validate data for update operation
     */
    protected function validateUpdateData(array $data, {{modelName}} ${{modelNameLower}}): void
    {
        // Add your custom business logic validation here
        // Example:
        // if (isset($data['email']) && $this->isEmailTakenByOther($data['email'], ${{modelNameLower}}->id)) {
        //     throw new Exception('Email already taken');
        // }
    }

    /**
     * Validate data for delete operation
     */
    protected function validateDeleteData({{modelName}} ${{modelNameLower}}): void
    {
        // Add your custom business logic validation here
        // Example:
        // if (${{modelNameLower}}->hasRelatedRecords()) {
        //     throw new Exception('Cannot delete {{modelNameLower}} with related records');
        // }
    }
}