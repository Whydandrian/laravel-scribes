<?php

namespace {{namespace}};

use App\Http\Controllers\Api\BaseApiController;
use Illuminate\Http\Request;
use {{requestNamespace}}\Store{{class}}Request;
use {{requestNamespace}}\Update{{class}}Request;
use {{serviceNamespace}}\{{class}}Service;

/**
 * @OA\Tag(
 *     name="{{class}}",
 *     description="API Endpoints untuk {{class}}"
 * )
 */
class {{class}} extends BaseApiController
{
    protected $service;

    public function __construct({{class}}Service $service)
    {
        $this->service = $service;
    }

    /**
     * @OA\Get(
     *     path="/api/{{route}}",
     *     tags={"{{class}}"},
     *     summary="Get list of {{class}}",
     *     @OA\Response(response=200, description="Success")
     * )
     */
    public function index()
    {
        return $this->success($this->service->getAll());
    }

    /**
     * @OA\Get(
     *     path="/api/{{route}}/{id}",
     *     tags={"{{class}}"},
     *     summary="Get detail of {{class}}",
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         required=true,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(response=200, description="Success"),
     *     @OA\Response(response=404, description="Not Found")
     * )
     */
    public function show($id)
    {
        return $this->success($this->service->find($id));
    }

    /**
     * @OA\Post(
     *     path="/api/{{route}}",
     *     tags={"{{class}}"},
     *     summary="Create new {{class}}",
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(ref="#/components/schemas/Store{{class}}Request")
     *     ),
     *     @OA\Response(response=201, description="Created"),
     *     @OA\Response(response=422, description="Validation Error")
     * )
     */
    public function store(Store{{class}}Request $request)
    {
        return $this->success($this->service->create($request->validated()), 201);
    }

    /**
     * @OA\Put(
     *     path="/api/{{route}}/{id}",
     *     tags={"{{class}}"},
     *     summary="Update {{class}}",
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         required=true,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(ref="#/components/schemas/Update{{class}}Request")
     *     ),
     *     @OA\Response(response=200, description="Updated"),
     *     @OA\Response(response=404, description="Not Found"),
     *     @OA\Response(response=422, description="Validation Error")
     * )
     */
    public function update(Update{{class}}Request $request, $id)
    {
        return $this->success($this->service->update($id, $request->validated()));
    }

    /**
     * @OA\Delete(
     *     path="/api/{{route}}/{id}",
     *     tags={"{{class}}"},
     *     summary="Delete {{class}}",
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         required=true,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(response=204, description="No Content"),
     *     @OA\Response(response=404, description="Not Found")
     * )
     */
    public function destroy($id)
    {
        $this->service->delete($id);
        return $this->success(null, 204);
    }
}
